//
// SampleGameScreenDynamicView.swift
// Generated by Core Animator version 1.1.1 on 8/16/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class SampleGameScreenDynamicView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 2208, height: 1242))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:2208, height:1242)
		__scaling__.center = CGPoint(x:1104.0, y:621.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let background = UIImageView()
		background.bounds = CGRect(x:0, y:0, width:4416.0, height:2484.0)
		var imgBackground: UIImage!
		if let imagePath = bundle.pathForResource("Background.png", ofType:nil) {
			imgBackground = UIImage(contentsOfFile:imagePath)
		}
		background.image = imgBackground
		background.contentMode = .Center;
		background.layer.position = CGPoint(x:1104.103, y:621.183)
		background.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(0.00), 0.50, 0.50)
		__scaling__.addSubview(background)
		viewsByName["Background"] = background

		let gameFrame2 = UIImageView()
		gameFrame2.bounds = CGRect(x:0, y:0, width:3336.0, height:2310.0)
		var imgGameFrame: UIImage!
		if let imagePath = bundle.pathForResource("Game Frame.png", ofType:nil) {
			imgGameFrame = UIImage(contentsOfFile:imagePath)
		}
		gameFrame2.image = imgGameFrame
		gameFrame2.contentMode = .Center;
		gameFrame2.layer.position = CGPoint(x:1104.000, y:664.500)
		gameFrame2.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(gameFrame2)
		viewsByName["Game Frame 2"] = gameFrame2

		let blocks = UIImageView()
		blocks.bounds = CGRect(x:0, y:0, width:2988.0, height:1676.0)
		var imgBlocks: UIImage!
		if let imagePath = bundle.pathForResource("Blocks.png", ofType:nil) {
			imgBlocks = UIImage(contentsOfFile:imagePath)
		}
		blocks.image = imgBlocks
		blocks.contentMode = .Center;
		blocks.layer.position = CGPoint(x:1104.103, y:602.183)
		blocks.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(blocks)
		viewsByName["Blocks"] = blocks

		let tan1 = UIImageView()
		tan1.bounds = CGRect(x:0, y:0, width:230.0, height:230.0)
		var imgTan1: UIImage!
		if let imagePath = bundle.pathForResource("Tan 1.png", ofType:nil) {
			imgTan1 = UIImage(contentsOfFile:imagePath)
		}
		tan1.image = imgTan1
		tan1.contentMode = .Center;
		tan1.layer.position = CGPoint(x:544.211, y:784.672)
		tan1.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(tan1)
		viewsByName["Tan 1"] = tan1

		let specialIcon = UIImageView()
		specialIcon.bounds = CGRect(x:0, y:0, width:230.0, height:240.0)
		var imgSpecialIcon: UIImage!
		if let imagePath = bundle.pathForResource("Special Icon.png", ofType:nil) {
			imgSpecialIcon = UIImage(contentsOfFile:imagePath)
		}
		specialIcon.image = imgSpecialIcon
		specialIcon.contentMode = .Center;
		specialIcon.layer.position = CGPoint(x:677.048, y:388.457)
		specialIcon.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(specialIcon)
		viewsByName["Special Icon"] = specialIcon

		let red3 = UIImageView()
		red3.bounds = CGRect(x:0, y:0, width:234.0, height:234.0)
		var imgRed3: UIImage!
		if let imagePath = bundle.pathForResource("Red 3.png", ofType:nil) {
			imgRed3 = UIImage(contentsOfFile:imagePath)
		}
		red3.image = imgRed3
		red3.contentMode = .Center;
		red3.layer.position = CGPoint(x:1659.732, y:799.651)
		red3.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(red3)
		viewsByName["Red 3"] = red3

		let red2 = UIImageView()
		red2.bounds = CGRect(x:0, y:0, width:236.0, height:234.0)
		var imgRed2: UIImage!
		if let imagePath = bundle.pathForResource("Red 2.png", ofType:nil) {
			imgRed2 = UIImage(contentsOfFile:imagePath)
		}
		red2.image = imgRed2
		red2.contentMode = .Center;
		red2.layer.position = CGPoint(x:1787.447, y:947.871)
		red2.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(red2)
		viewsByName["Red 2"] = red2

		let red1 = UIImageView()
		red1.bounds = CGRect(x:0, y:0, width:236.0, height:236.0)
		var imgRed1: UIImage!
		if let imagePath = bundle.pathForResource("Red 1.png", ofType:nil) {
			imgRed1 = UIImage(contentsOfFile:imagePath)
		}
		red1.image = imgRed1
		red1.contentMode = .Center;
		red1.layer.position = CGPoint(x:952.128, y:680.000)
		red1.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(red1)
		viewsByName["Red 1"] = red1

		let purple2 = UIImageView()
		purple2.bounds = CGRect(x:0, y:0, width:202.0, height:202.0)
		var imgPurple2: UIImage!
		if let imagePath = bundle.pathForResource("Purple 2.png", ofType:nil) {
			imgPurple2 = UIImage(contentsOfFile:imagePath)
		}
		purple2.image = imgPurple2
		purple2.contentMode = .Center;
		purple2.layer.position = CGPoint(x:943.723, y:805.759)
		purple2.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(purple2)
		viewsByName["Purple 2"] = purple2

		let purple1 = UIImageView()
		purple1.bounds = CGRect(x:0, y:0, width:202.0, height:202.0)
		var imgPurple1: UIImage!
		if let imagePath = bundle.pathForResource("Purple 1.png", ofType:nil) {
			imgPurple1 = UIImage(contentsOfFile:imagePath)
		}
		purple1.image = imgPurple1
		purple1.contentMode = .Center;
		purple1.layer.position = CGPoint(x:818.280, y:928.714)
		purple1.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(purple1)
		viewsByName["Purple 1"] = purple1

		let green1 = UIImageView()
		green1.bounds = CGRect(x:0, y:0, width:210.0, height:208.0)
		var imgGreen1: UIImage!
		if let imagePath = bundle.pathForResource("Green 1.png", ofType:nil) {
			imgGreen1 = UIImage(contentsOfFile:imagePath)
		}
		green1.image = imgGreen1
		green1.contentMode = .Center;
		green1.layer.position = CGPoint(x:1790.833, y:259.853)
		green1.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(green1)
		viewsByName["Green 1"] = green1

		let green2 = UIImageView()
		green2.bounds = CGRect(x:0, y:0, width:210.0, height:208.0)
		green2.image = imgGreen1
		green2.contentMode = .Center;
		green2.layer.position = CGPoint(x:543.000, y:386.000)
		green2.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(green2)
		viewsByName["Green 2"] = green2

		let blue1 = UIImageView()
		blue1.bounds = CGRect(x:0, y:0, width:202.0, height:204.0)
		var imgBlue1: UIImage!
		if let imagePath = bundle.pathForResource("Blue 1.png", ofType:nil) {
			imgBlue1 = UIImage(contentsOfFile:imagePath)
		}
		blue1.image = imgBlue1
		blue1.contentMode = .Center;
		blue1.layer.position = CGPoint(x:410.169, y:934.148)
		blue1.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(blue1)
		viewsByName["Blue 1"] = blue1

		let upperTab = UIImageView()
		upperTab.bounds = CGRect(x:0, y:0, width:1230.0, height:398.0)
		var imgUpperTab: UIImage!
		if let imagePath = bundle.pathForResource("Upper Tab.png", ofType:nil) {
			imgUpperTab = UIImage(contentsOfFile:imagePath)
		}
		upperTab.image = imgUpperTab
		upperTab.contentMode = .Center;
		upperTab.layer.position = CGPoint(x:1104.000, y:68.406)
		upperTab.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(upperTab)
		viewsByName["Upper Tab"] = upperTab

		let star = UIImageView()
		star.bounds = CGRect(x:0, y:0, width:26.0, height:26.0)
		var imgStar: UIImage!
		if let imagePath = bundle.pathForResource("Star.png", ofType:nil) {
			imgStar = UIImage(contentsOfFile:imagePath)
		}
		star.image = imgStar
		star.contentMode = .Center;
		star.layer.position = CGPoint(x:387.426, y:60.763)
		star.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(star)
		viewsByName["Star"] = star

		let star2 = UIImageView()
		star2.bounds = CGRect(x:0, y:0, width:26.0, height:26.0)
		star2.layer.anchorPoint = CGPoint(x:0.550, y:0.874)
		star2.image = imgStar
		star2.contentMode = .Center;
		star2.layer.position = CGPoint(x:23.684, y:78.541)
		star2.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(star2)
		viewsByName["Star 2"] = star2

		let star22 = UIImageView()
		star22.bounds = CGRect(x:0, y:0, width:26.0, height:26.0)
		star22.layer.anchorPoint = CGPoint(x:0.550, y:0.874)
		star22.image = imgStar
		star22.contentMode = .Center;
		star22.layer.position = CGPoint(x:139.930, y:419.656)
		star22.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(star22)
		viewsByName["Star 2 2"] = star22

		let star222 = UIImageView()
		star222.bounds = CGRect(x:0, y:0, width:26.0, height:26.0)
		star222.layer.anchorPoint = CGPoint(x:0.550, y:0.874)
		star222.image = imgStar
		star222.contentMode = .Center;
		star222.layer.position = CGPoint(x:1843.492, y:50.945)
		star222.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(star222)
		viewsByName["Star 2 2 2"] = star222

		let star2222 = UIImageView()
		star2222.bounds = CGRect(x:0, y:0, width:26.0, height:26.0)
		star2222.layer.anchorPoint = CGPoint(x:0.550, y:0.874)
		star2222.image = imgStar
		star2222.contentMode = .Center;
		star2222.layer.position = CGPoint(x:93.766, y:634.367)
		star2222.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(star2222)
		viewsByName["Star 2 2 2 2"] = star2222

		let lowerTabAndPause = UIImageView()
		lowerTabAndPause.bounds = CGRect(x:0, y:0, width:2336.0, height:1726.0)
		var imgLowerTabAndPause: UIImage!
		if let imagePath = bundle.pathForResource("Lower Tab and Pause.png", ofType:nil) {
			imgLowerTabAndPause = UIImage(contentsOfFile:imagePath)
		}
		lowerTabAndPause.image = imgLowerTabAndPause
		lowerTabAndPause.contentMode = .Center;
		lowerTabAndPause.layer.position = CGPoint(x:1104.000, y:1473.590)
		lowerTabAndPause.transform = CGAffineTransformMakeScale(0.50, 0.50)
		__scaling__.addSubview(lowerTabAndPause)
		viewsByName["Lower Tab and Pause"] = lowerTabAndPause

		self.viewsByName = viewsByName
	}

	// - MARK: Pause_Closed

	func addPauseClosedAnimation() {
		addPauseClosedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPauseClosedAnimation(completion: ((Bool) -> Void)?) {
		addPauseClosedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPauseClosedAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addPauseClosedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPauseClosedAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPauseClosedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPauseClosedAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.375
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "PauseClosed")
			self.animationCompletions[layer.animationForKey("PauseClosed")] = complete
		}

		let lowerTabAndPauseTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lowerTabAndPauseTranslationYAnimation.duration = 0.375
		lowerTabAndPauseTranslationYAnimation.values = [-343.000 as Float, 0.000 as Float]
		lowerTabAndPauseTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		lowerTabAndPauseTranslationYAnimation.timingFunctions = [linearTiming]
		lowerTabAndPauseTranslationYAnimation.beginTime = beginTime
		lowerTabAndPauseTranslationYAnimation.fillMode = fillMode
		lowerTabAndPauseTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Lower Tab and Pause"]?.layer.addAnimation(lowerTabAndPauseTranslationYAnimation, forKey:"Pause_Closed_TranslationY")
	}

	func removePauseClosedAnimation() {
		self.layer.removeAnimationForKey("PauseClosed")
		self.viewsByName["Lower Tab and Pause"]?.layer.removeAnimationForKey("Pause_Closed_TranslationY")
	}

	// - MARK: Pause_Opened

	func addPauseOpenedAnimation() {
		addPauseOpenedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPauseOpenedAnimation(completion: ((Bool) -> Void)?) {
		addPauseOpenedAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPauseOpenedAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addPauseOpenedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPauseOpenedAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPauseOpenedAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPauseOpenedAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.250
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "PauseOpened")
			self.animationCompletions[layer.animationForKey("PauseOpened")] = complete
		}

		let lowerTabAndPauseTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lowerTabAndPauseTranslationYAnimation.duration = 0.250
		lowerTabAndPauseTranslationYAnimation.values = [0.000 as Float, -343.945 as Float]
		lowerTabAndPauseTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		lowerTabAndPauseTranslationYAnimation.timingFunctions = [linearTiming]
		lowerTabAndPauseTranslationYAnimation.beginTime = beginTime
		lowerTabAndPauseTranslationYAnimation.fillMode = fillMode
		lowerTabAndPauseTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Lower Tab and Pause"]?.layer.addAnimation(lowerTabAndPauseTranslationYAnimation, forKey:"Pause_Opened_TranslationY")
	}

	func removePauseOpenedAnimation() {
		self.layer.removeAnimationForKey("PauseOpened")
		self.viewsByName["Lower Tab and Pause"]?.layer.removeAnimationForKey("Pause_Opened_TranslationY")
	}

	// - MARK: Stars

	func addStarsAnimation() {
		addStarsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addStarsAnimation(completion: ((Bool) -> Void)?) {
		addStarsAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addStarsAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addStarsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addStarsAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addStarsAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addStarsAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.375
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Stars")
			self.animationCompletions[layer.animationForKey("Stars")] = complete
		}

		let star2222OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		star2222OpacityAnimation.duration = 2.750
		star2222OpacityAnimation.values = [1.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float, 1.000 as Float]
		star2222OpacityAnimation.keyTimes = [0.000 as Float, 0.136 as Float, 0.245 as Float, 0.482 as Float, 1.000 as Float]
		star2222OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		star2222OpacityAnimation.autoreverses = true
		star2222OpacityAnimation.repeatCount = HUGE
		star2222OpacityAnimation.beginTime = beginTime
		star2222OpacityAnimation.fillMode = fillMode
		star2222OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Star 2 2 2 2"]?.layer.addAnimation(star2222OpacityAnimation, forKey:"Stars_Opacity")

		let star22OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		star22OpacityAnimation.duration = 2.750
		star22OpacityAnimation.values = [1.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float, 1.000 as Float]
		star22OpacityAnimation.keyTimes = [0.000 as Float, 0.136 as Float, 0.245 as Float, 0.482 as Float, 1.000 as Float]
		star22OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		star22OpacityAnimation.autoreverses = true
		star22OpacityAnimation.repeatCount = HUGE
		star22OpacityAnimation.beginTime = beginTime
		star22OpacityAnimation.fillMode = fillMode
		star22OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Star 2 2"]?.layer.addAnimation(star22OpacityAnimation, forKey:"Stars_Opacity")

		let star2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		star2OpacityAnimation.duration = 3.375
		star2OpacityAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float, 0.805 as Float, 0.000 as Float]
		star2OpacityAnimation.keyTimes = [0.000 as Float, 0.556 as Float, 0.630 as Float, 0.704 as Float, 0.873 as Float, 1.000 as Float]
		star2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		star2OpacityAnimation.autoreverses = true
		star2OpacityAnimation.repeatCount = HUGE
		star2OpacityAnimation.beginTime = beginTime
		star2OpacityAnimation.fillMode = fillMode
		star2OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Star 2"]?.layer.addAnimation(star2OpacityAnimation, forKey:"Stars_Opacity")

		let star222OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		star222OpacityAnimation.duration = 2.750
		star222OpacityAnimation.values = [1.000 as Float, 0.000 as Float, 1.000 as Float, 0.000 as Float, 1.000 as Float]
		star222OpacityAnimation.keyTimes = [0.000 as Float, 0.136 as Float, 0.245 as Float, 0.482 as Float, 1.000 as Float]
		star222OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		star222OpacityAnimation.autoreverses = true
		star222OpacityAnimation.repeatCount = HUGE
		star222OpacityAnimation.beginTime = beginTime
		star222OpacityAnimation.fillMode = fillMode
		star222OpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Star 2 2 2"]?.layer.addAnimation(star222OpacityAnimation, forKey:"Stars_Opacity")

		let starOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		starOpacityAnimation.duration = 4.375
		starOpacityAnimation.values = [1.000 as Float, 0.000 as Float, 1.000 as Float, 0.533 as Float, 0.948 as Float, 0.000 as Float]
		starOpacityAnimation.keyTimes = [0.000 as Float, 0.743 as Float, 0.857 as Float, 0.914 as Float, 0.943 as Float, 1.000 as Float]
		starOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		starOpacityAnimation.autoreverses = true
		starOpacityAnimation.repeatCount = HUGE
		starOpacityAnimation.beginTime = beginTime
		starOpacityAnimation.fillMode = fillMode
		starOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Star"]?.layer.addAnimation(starOpacityAnimation, forKey:"Stars_Opacity")
	}

	func removeStarsAnimation() {
		self.layer.removeAnimationForKey("Stars")
		self.viewsByName["Star 2 2 2 2"]?.layer.removeAnimationForKey("Stars_Opacity")
		self.viewsByName["Star 2 2"]?.layer.removeAnimationForKey("Stars_Opacity")
		self.viewsByName["Star 2"]?.layer.removeAnimationForKey("Stars_Opacity")
		self.viewsByName["Star 2 2 2"]?.layer.removeAnimationForKey("Stars_Opacity")
		self.viewsByName["Star"]?.layer.removeAnimationForKey("Stars_Opacity")
	}

	// - MARK: Static_Icon_Bounce

	func addStaticIconBounceAnimation() {
		addStaticIconBounceAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addStaticIconBounceAnimation(completion: ((Bool) -> Void)?) {
		addStaticIconBounceAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addStaticIconBounceAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addStaticIconBounceAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addStaticIconBounceAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addStaticIconBounceAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addStaticIconBounceAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 12.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "StaticIconBounce")
			self.animationCompletions[layer.animationForKey("StaticIconBounce")] = complete
		}

		let purple1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		purple1RotationAnimation.duration = 4.000
		purple1RotationAnimation.values = [0.000 as Float, 0.000 as Float, 0.143 as Float, -0.140 as Float, 0.000 as Float, 0.000 as Float]
		purple1RotationAnimation.keyTimes = [0.000 as Float, 0.125 as Float, 0.162 as Float, 0.188 as Float, 0.213 as Float, 1.000 as Float]
		purple1RotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		purple1RotationAnimation.autoreverses = true
		purple1RotationAnimation.repeatCount = HUGE
		purple1RotationAnimation.beginTime = beginTime
		purple1RotationAnimation.fillMode = fillMode
		purple1RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Purple 1"]?.layer.addAnimation(purple1RotationAnimation, forKey:"Static_Icon_Bounce_Rotation")

		let purple1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		purple1TranslationYAnimation.duration = 12.000
		purple1TranslationYAnimation.values = [0.000 as Float, 0.000 as Float, -20.000 as Float, 0.000 as Float, -10.000 as Float, 0.000 as Float, 0.000 as Float]
		purple1TranslationYAnimation.keyTimes = [0.000 as Float, 0.375 as Float, 0.396 as Float, 0.408 as Float, 0.421 as Float, 0.433 as Float, 1.000 as Float]
		purple1TranslationYAnimation.timingFunctions = [linearTiming, overshootTiming, overshootTiming, anticOverTiming, anticOverTiming, linearTiming]
		purple1TranslationYAnimation.autoreverses = true
		purple1TranslationYAnimation.repeatCount = HUGE
		purple1TranslationYAnimation.beginTime = beginTime
		purple1TranslationYAnimation.fillMode = fillMode
		purple1TranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Purple 1"]?.layer.addAnimation(purple1TranslationYAnimation, forKey:"Static_Icon_Bounce_TranslationY")

		let purple2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		purple2RotationAnimation.duration = 5.500
		purple2RotationAnimation.values = [0.000 as Float, 0.000 as Float, 6.283 as Float, 6.283 as Float]
		purple2RotationAnimation.keyTimes = [0.000 as Float, 0.091 as Float, 0.182 as Float, 1.000 as Float]
		purple2RotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		purple2RotationAnimation.autoreverses = true
		purple2RotationAnimation.repeatCount = HUGE
		purple2RotationAnimation.beginTime = beginTime
		purple2RotationAnimation.fillMode = fillMode
		purple2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Purple 2"]?.layer.addAnimation(purple2RotationAnimation, forKey:"Static_Icon_Bounce_Rotation")

		let green1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		green1TranslationYAnimation.duration = 3.500
		green1TranslationYAnimation.values = [0.000 as Float, 0.000 as Float, -20.000 as Float, 0.000 as Float, -10.000 as Float, 0.000 as Float, 0.000 as Float]
		green1TranslationYAnimation.keyTimes = [0.000 as Float, 0.257 as Float, 0.321 as Float, 0.364 as Float, 0.386 as Float, 0.421 as Float, 1.000 as Float]
		green1TranslationYAnimation.timingFunctions = [linearTiming, anticOverTiming, anticOverTiming, overshootTiming, anticOverTiming, linearTiming]
		green1TranslationYAnimation.repeatCount = HUGE
		green1TranslationYAnimation.beginTime = beginTime
		green1TranslationYAnimation.fillMode = fillMode
		green1TranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Green 1"]?.layer.addAnimation(green1TranslationYAnimation, forKey:"Static_Icon_Bounce_TranslationY")

		let red2RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		red2RotationAnimation.duration = 7.900
		red2RotationAnimation.values = [0.000 as Float, 0.000 as Float, 6.283 as Float, 6.283 as Float]
		red2RotationAnimation.keyTimes = [0.000 as Float, 0.399 as Float, 0.468 as Float, 1.000 as Float]
		red2RotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		red2RotationAnimation.autoreverses = true
		red2RotationAnimation.repeatCount = HUGE
		red2RotationAnimation.beginTime = beginTime
		red2RotationAnimation.fillMode = fillMode
		red2RotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Red 2"]?.layer.addAnimation(red2RotationAnimation, forKey:"Static_Icon_Bounce_Rotation")

		let blue1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		blue1TranslationYAnimation.duration = 5.500
		blue1TranslationYAnimation.values = [0.000 as Float, -20.000 as Float, 0.000 as Float, -10.000 as Float, -3.000 as Float, -3.000 as Float]
		blue1TranslationYAnimation.keyTimes = [0.000 as Float, 0.059 as Float, 0.077 as Float, 0.105 as Float, 0.141 as Float, 1.000 as Float]
		blue1TranslationYAnimation.timingFunctions = [anticOverTiming, overshootTiming, overshootTiming, anticOverTiming, linearTiming]
		blue1TranslationYAnimation.repeatCount = HUGE
		blue1TranslationYAnimation.beginTime = beginTime
		blue1TranslationYAnimation.fillMode = fillMode
		blue1TranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Blue 1"]?.layer.addAnimation(blue1TranslationYAnimation, forKey:"Static_Icon_Bounce_TranslationY")

		let specialIconRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		specialIconRotationAnimation.duration = 2.800
		specialIconRotationAnimation.values = [0.000 as Float, 0.092 as Float, 0.000 as Float, 0.053 as Float, 0.000 as Float, 0.000 as Float]
		specialIconRotationAnimation.keyTimes = [0.000 as Float, 0.107 as Float, 0.116 as Float, 0.295 as Float, 0.304 as Float, 1.000 as Float]
		specialIconRotationAnimation.timingFunctions = [anticOverTiming, linearTiming, anticOverTiming, linearTiming, linearTiming]
		specialIconRotationAnimation.autoreverses = true
		specialIconRotationAnimation.repeatCount = HUGE
		specialIconRotationAnimation.beginTime = beginTime
		specialIconRotationAnimation.fillMode = fillMode
		specialIconRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Special Icon"]?.layer.addAnimation(specialIconRotationAnimation, forKey:"Static_Icon_Bounce_Rotation")

		let specialIconScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		specialIconScaleXAnimation.duration = 2.800
		specialIconScaleXAnimation.values = [0.500 as Float, 0.600 as Float, 0.500 as Float, 0.500 as Float]
		specialIconScaleXAnimation.keyTimes = [0.000 as Float, 0.107 as Float, 0.366 as Float, 1.000 as Float]
		specialIconScaleXAnimation.timingFunctions = [overshootTiming, overshootTiming, linearTiming]
		specialIconScaleXAnimation.autoreverses = true
		specialIconScaleXAnimation.repeatCount = HUGE
		specialIconScaleXAnimation.beginTime = beginTime
		specialIconScaleXAnimation.fillMode = fillMode
		specialIconScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Special Icon"]?.layer.addAnimation(specialIconScaleXAnimation, forKey:"Static_Icon_Bounce_ScaleX")

		let specialIconScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		specialIconScaleYAnimation.duration = 2.800
		specialIconScaleYAnimation.values = [0.500 as Float, 0.600 as Float, 0.500 as Float, 0.500 as Float]
		specialIconScaleYAnimation.keyTimes = [0.000 as Float, 0.107 as Float, 0.366 as Float, 1.000 as Float]
		specialIconScaleYAnimation.timingFunctions = [overshootTiming, overshootTiming, linearTiming]
		specialIconScaleYAnimation.autoreverses = true
		specialIconScaleYAnimation.repeatCount = HUGE
		specialIconScaleYAnimation.beginTime = beginTime
		specialIconScaleYAnimation.fillMode = fillMode
		specialIconScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Special Icon"]?.layer.addAnimation(specialIconScaleYAnimation, forKey:"Static_Icon_Bounce_ScaleY")

		let specialIconTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		specialIconTranslationXAnimation.duration = 2.800
		specialIconTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 4.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float]
		specialIconTranslationXAnimation.keyTimes = [0.000 as Float, 0.089 as Float, 0.107 as Float, 0.116 as Float, 0.295 as Float, 1.000 as Float]
		specialIconTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		specialIconTranslationXAnimation.autoreverses = true
		specialIconTranslationXAnimation.repeatCount = HUGE
		specialIconTranslationXAnimation.beginTime = beginTime
		specialIconTranslationXAnimation.fillMode = fillMode
		specialIconTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Special Icon"]?.layer.addAnimation(specialIconTranslationXAnimation, forKey:"Static_Icon_Bounce_TranslationX")

		let specialIconTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		specialIconTranslationYAnimation.duration = 2.800
		specialIconTranslationYAnimation.values = [0.000 as Float, -6.000 as Float, 0.000 as Float, -3.500 as Float, -3.500 as Float]
		specialIconTranslationYAnimation.keyTimes = [0.000 as Float, 0.107 as Float, 0.161 as Float, 0.295 as Float, 1.000 as Float]
		specialIconTranslationYAnimation.timingFunctions = [anticOverTiming, linearTiming, anticOverTiming, linearTiming]
		specialIconTranslationYAnimation.autoreverses = true
		specialIconTranslationYAnimation.repeatCount = HUGE
		specialIconTranslationYAnimation.beginTime = beginTime
		specialIconTranslationYAnimation.fillMode = fillMode
		specialIconTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Special Icon"]?.layer.addAnimation(specialIconTranslationYAnimation, forKey:"Static_Icon_Bounce_TranslationY")
	}

	func removeStaticIconBounceAnimation() {
		self.layer.removeAnimationForKey("StaticIconBounce")
		self.viewsByName["Purple 1"]?.layer.removeAnimationForKey("Static_Icon_Bounce_Rotation")
		self.viewsByName["Purple 1"]?.layer.removeAnimationForKey("Static_Icon_Bounce_TranslationY")
		self.viewsByName["Purple 2"]?.layer.removeAnimationForKey("Static_Icon_Bounce_Rotation")
		self.viewsByName["Green 1"]?.layer.removeAnimationForKey("Static_Icon_Bounce_TranslationY")
		self.viewsByName["Red 2"]?.layer.removeAnimationForKey("Static_Icon_Bounce_Rotation")
		self.viewsByName["Blue 1"]?.layer.removeAnimationForKey("Static_Icon_Bounce_TranslationY")
		self.viewsByName["Special Icon"]?.layer.removeAnimationForKey("Static_Icon_Bounce_Rotation")
		self.viewsByName["Special Icon"]?.layer.removeAnimationForKey("Static_Icon_Bounce_ScaleX")
		self.viewsByName["Special Icon"]?.layer.removeAnimationForKey("Static_Icon_Bounce_ScaleY")
		self.viewsByName["Special Icon"]?.layer.removeAnimationForKey("Static_Icon_Bounce_TranslationX")
		self.viewsByName["Special Icon"]?.layer.removeAnimationForKey("Static_Icon_Bounce_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Stars")
		self.layer.removeAnimationForKey("PauseClosed")
		self.layer.removeAnimationForKey("PauseOpened")
		self.layer.removeAnimationForKey("StaticIconBounce")
	}
}